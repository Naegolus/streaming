/*
  This file is part of the DSP-Crowd project
  https://www.dsp-crowd.com

  Author(s):
      - Johannes Natter, office@dsp-crowd.com

  Copyright (C) 2017-now Authors and www.dsp-crowd.com

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int main(int argc, char *argv[])
{
	if (argc < 3)
	{
		cerr << "usage: bin2cpp <output file> <input files>" << endl;
		return 1;
	}

	string nameCpp(argv[1]);
	string nameOut = nameCpp.substr(0, nameCpp.find("."));
	string nameHpp = nameOut + ".h";

	ofstream fHpp(nameHpp, ios::binary);
	ofstream fCpp(nameCpp, ios::binary);

	nameOut = nameOut.substr(nameOut.rfind("/") + 1);

	string nameOutU;
	for (string::iterator iter = nameOut.begin(); iter != nameOut.end(); ++iter)
		nameOutU += toupper(*iter);

	fHpp << endl;
	fHpp << "/* Autogenerated by DSP-Crowds bin2cpp */" << endl;
	fHpp << endl;

	string guard = nameOutU + "_H";
	fHpp << "#ifndef " << guard << endl;
	fHpp << "#define " << guard << endl;
	fHpp << endl;

#if 0
	fHpp << "#ifdef __cplusplus" << endl;
	fHpp << "extern \"C\" {" << endl;
	fHpp << "#endif" << endl;
	fHpp << endl;
#endif

	fHpp << "#include <cstddef>" << endl;
	fHpp << endl;

	fHpp << "typedef struct" << endl;
	fHpp << "{" << endl;
	fHpp << "\tconst char *name;" << endl;
	fHpp << "\tconst char *pSrc;" << endl;
	fHpp << "\tconst size_t size;" << endl;
	fHpp << "} Resource;" << endl;
	fHpp << endl;

	fHpp << "extern const Resource resources[];" << endl;
	fHpp << "extern const Resource *pResourcesEnd;" << endl;
	fHpp << endl;

#if 0
	fHpp << "#ifdef __cplusplus" << endl;
	fHpp << "} /* extern \"C\" */" << endl;
	fHpp << "#endif" << endl;
	fHpp << endl;
#endif

	fHpp << "#endif /* " << guard << " */" << endl;
	fHpp << endl;

	fCpp << endl;
	fCpp << "/* Autogenerated by DSP-Crowds bin2cpp */" << endl;
	fCpp << endl;

	fCpp << "#include \"" << nameOut << ".h\"" << endl;
	fCpp << endl;

	for (int i = 2; i < argc; ++i)
	{
		string nameIn(argv[i]);

		ifstream fIn(nameIn, ios::binary);
		vector<unsigned char> bufIn(istreambuf_iterator<char>(fIn), {});

		nameIn = nameIn.substr(nameIn.rfind("/") + 1);
		replace(nameIn.begin(), nameIn.end(), '.', '_');
		replace(nameIn.begin(), nameIn.end(), '-', '_');

		fCpp << "const unsigned char " << nameIn << "[] = " << endl;
		fCpp << "{" << endl;

		int dataIdx = 0;
		for (vector<unsigned char>::iterator iter = bufIn.begin(); iter != bufIn.end(); ++iter)
		{
			if (dataIdx >= 16)
			{
				fCpp << endl;
				dataIdx = 0;
			}

			fCpp << "0x" << hex << setw(2) << setfill('0') << ((int)*iter) << ", ";

			++dataIdx;
		}

		fCpp << "0, ";
		fCpp << endl;
		fCpp << "};" << endl;
		fCpp << endl;

		fCpp << "const size_t " << nameIn << "_len = " << dec << bufIn.size() << ";" << endl;
		fCpp << endl;
	}

	fCpp << "const Resource resources[] =" << endl;
	fCpp << "{" << endl;

	for (int i = 2; i < argc; ++i)
	{
		string nameIn(argv[i]);

		nameIn = nameIn.substr(nameIn.rfind("/") + 1);
		replace(nameIn.begin(), nameIn.end(), '.', '_');
		replace(nameIn.begin(), nameIn.end(), '-', '_');

		fCpp << "\t\"" << nameIn << "\",\t\t(char *)" << nameIn << ",\t\t" << nameIn << "_len," << endl;
	}

	fCpp << "};" << endl;
	fCpp << endl;

	fCpp << "const Resource *pResourcesEnd = resources + sizeof(resources) / sizeof(resources[0]);" << endl;
	fCpp << endl;

	return 0;
}
